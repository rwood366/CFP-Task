name: Secure Testing and Infra Deployment

on:
  push:
    branches:
      - main  #If in prod I would create feature branches and then add an additional step
env:
  docker_img_version: 'postgres:latest' #Must be Docker Hub hosted image
  snyk_scan_tolerance: 'high' #low / medium / high / critical

jobs:
  snyk-iac-scan:
    name: 'Snyk IaC Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Snyk to check configuration files for security issues
        continue-on-error: false 
        uses: snyk/actions/iac@14818c4695ecc4045f33c9cee9e795a788711ca4
        with:
          file: source/prod-infra.tf 
          args: --severity-threshold=${{ env.snyk_scan_tolerance }} #Terminate pipeline if tolerance value is met.
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN_DEMO }} 


  snyk-container-scan:
    name: 'Snyk Public Container Scan'
    needs: snyk-iac-scan
    permissions:
      contents: read # for actions/checkout to fetch code
  #    security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      # actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Snyk to check Docker image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN_DEMO }}
      with:
        image: ${{ env.docker_img_version }}
        args: --severity-threshold=${{ env.snyk_scan_tolerance }} #Terminate pipeline if tolerance value is met.


  build-and-push-acr:
      name: 'Upload Image to ACR'
      needs: snyk-container-scan
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to ACR
        uses: docker/login-action@v1
        with:
        #Given more time I would have used Azure Managed Identities to authenticate
          registry: ${{ secrets.ACR_PROD_DEMO_ENDPOINT }}
          username: ${{ secrets.ACR_PROD_DEMO_USERNAME }}
          password: ${{ secrets.ACR_PROD_DEMO_PASSWORD }}
      - name: Docker, Pull, Tag & Push
        run: | 
          docker pull ${{ env.docker_img_version }}
          docker tag ${{ env.docker_img_version }} ${{ secrets.ACR_PROD_DEMO_ENDPOINT }}/${{ env.docker_img_version }}
          docker push ${{ secrets.ACR_PROD_DEMO_ENDPOINT }}/${{ env.docker_img_version }}

  terraform: #Terraform Cloud - API driven workflow
    name: 'Terraform Deployment'
    needs: [snyk-iac-scan, snyk-container-scan, build-and-push-acr] #Before deploying infra ensure that the code and image is secure.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN_DEMO }}

      - name: Terraform Init
        run: | 
          cd source
          terraform init

      - name: Terraform Plan          
        run: |
          cd source
          terraform plan -input=false

      - name: Terraform Apply
        run: |
          cd source
          terraform apply -auto-approve -input=false

